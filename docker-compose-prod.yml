version: "3"
services:
  mysql:
    container_name: mysql-master
    image: library/mysql:8.0.22
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_USER: fkream
      MYSQL_PASSWORD: fkream
      MYSQL_ROOT_PASSWORD: root
      TZ: Asia/Seoul
      # 명령어 설정
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --lower_case_table_names=1
    volumes:
      - ./db/mysql/data:/var/lib/mysql
      - ./mysql-root:/root

  redis1:
    container_name: redis-sharding1
    image: redis
    restart: always
    user: root
    ports:
      - 6379:6379
  redis2:
    container_name: redis-sharding2
    image: redis
    restart: always
    user: root
    ports:
      - 6380:6379
  redis3:
    container_name: redis-sharding3
    image: redis
    restart: always
    user: root
    ports:
      - 6381:6379

  mongodb:
    image: mongo  # dockerhub를 사용하는 경우 mongo:버전
    restart: always
    ports:
      - 27017:27017  # 동일하게 사용하려는 경우 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - ./mongo-data:/data/db  # 현재 경로 하위에 생성하면 ./mongo-data:/data/db

  mongo-express:
    image: mongo-express  # dockerhub를 사용하는 경우 mongo-express:버전
    restart: always
    ports:
      - 8081:8081  # 동일하게 사용하려는 경우 8081:8081로 지정
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb  # mongodb 컨테이너 이름
      - ME_CONFIG_MONGODB_PORT=27017  # mongodb 연결 포트
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin  # mongodb 컨테이너의 root 계정
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin  # mongodb 컨테이너의 root 비밀번호
      - ME_CONFIG_BASICAUTH_USERNAME=admin  # mongo-express 사용자 계정
      - ME_CONFIG_BASICAUTH_PASSWORD=admin  # mongo-express 사용자 비밀번호
      # ME_CONFIG_MONGODB_ENABLE_ADMIN=true  # 모든 데이터베이스에 관리자권한으로 연결 (기본값 true)
    depends_on:
      - mongodb

  zk1:
    container_name: zookeeper1
    image: wurstmeister/zookeeper:latest
    restart: always
    hostname: zk1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    volumes:
      - "~/zk-cluster/zk1/data:/data"

  zk2:
    container_name: zookeeper2
    image: wurstmeister/zookeeper:latest
    restart: always
    hostname: zk2
    ports:
      - "2182:2181"
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    volumes:
      - "~/zk-cluster/zk2/data:/data"

  zk3:
    container_name: zookeeper3
    image: wurstmeister/zookeeper:latest
    restart: always
    hostname: zk3
    ports:
      - "2183:2181"
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    volumes:
      - "~/zk-cluster/zk3/data:/data"

  kafka1:
    container_name: kafka1
    image: wurstmeister/kafka:latest
    restart: on-failure
    depends_on:
      - zk1
      - zk2
      - zk3
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 101.101.210.178
      BOOTSTRAP_SERVERS: 101.101.210.178:9092, 101.101.210.178:9093, 101.101.210.178:9094
      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

  kafka2:
    container_name: kafka2
    image: wurstmeister/kafka:latest
    restart: on-failure
    depends_on:
      - zk1
      - zk2
      - zk3
    ports:
      - "9093:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_HOST_NAME: 101.101.210.178
      BOOTSTRAP_SERVERS: 101.101.210.178:9092, 101.101.210.178:9093, 101.101.210.178:9094
      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

  kafka3:
    container_name: kafka3
    image: wurstmeister/kafka:latest
    restart: on-failure
    depends_on:
      - zk1
      - zk2
      - zk3
    ports:
      - "9094:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_HOST_NAME: 101.101.210.178
      BOOTSTRAP_SERVERS: 101.101.210.178:9092, 101.101.210.178:9093, 101.101.210.178:9094
      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "10000:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=101.101.210.178:9092,101.101.210.178:9093,101.101.210.178:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zk1:2181,zk2:2182,zk1:2183